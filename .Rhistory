x <- rnorm(n, 5, 10)
ui <- rnorm(n)
first_appearance <- match(1:n_actors, events_act)
y[first_appearance] <- 4 + rnorm(n_actors,10,2) + 2*x[first_appearance] + ui[first_appearance]
x2 <- rep(0,n)
for(i in 2:n){
if(i %in% first_appearance){next}
y[i] <- 4 + 2*x[i] + ui[i] + rho[events_act[i]]*y[max(which(events_act[1:(i - 1)] == events_act[i]))]
x2[i] <- y[max(which(events_act[1:(i - 1)] == events_act[i]))]
}
model <- lm(y ~ x)
summary(model)
lmtest::dwtest(model)
model$coefficients[1:2]
#can we kick it out through a fixed effect?
fixede <- as.factor(events_act)
model1 <- lm(y ~ x + fixede)
summary(model1)
lmtest::dwtest(model1)
lmtest::bgtest(model1)
model$coefficients[1:2]
model1$coefficients[1:2]
model2 <- lm(y ~ x + x2)
summary(model2)
summary(model2)
y
x2
y
x2
first_appearance
n <- 5000
n_actors <- 100
events_act <- sample(n_actors, n, T)
rho <- abs(rnorm(n_actors, 0, 0.33))
y <- rep(0, n)
x <- rnorm(n, 5, 10)
ui <- rnorm(n)
first_appearance <- match(1:n_actors, events_act)
y[first_appearance] <- 4 + rnorm(n_actors,10,2) + 2*x[first_appearance] + ui[first_appearance]
x2 <- rep(0,n)
for(i in 2:n){
if(i %in% first_appearance){next}
y[i] <- 4 + 2*x[i] + ui[i] + rho[events_act[i]]*y[max(which(events_act[1:(i - 1)] == events_act[i]))]
x2[i] <- y[max(which(events_act[1:(i - 1)] == events_act[i]))]
}
model <- lm(y ~ x)
summary(model)
lmtest::dwtest(model)
model$coefficients[1:2]
#can we kick it out through a fixed effect?
fixede <- as.factor(events_act)
model1 <- lm(y ~ x + fixede)
summary(model1)
lmtest::dwtest(model1)
lmtest::bgtest(model1)
model$coefficients[1:2]
model1$coefficients[1:2]
model2 <- lm(y ~ x + x2)
summary(model2)
ui
mean(ui)
n <- 5000
n_actors <- 100
events_act <- sample(n_actors, n, T)
rho <- abs(rnorm(n_actors, 0, 0.33))
y <- rep(0, n)
x <- rnorm(n, 5, 10)
ui <- rnorm(n,0,1)
first_appearance <- match(1:n_actors, events_act)
y[first_appearance] <- 4 + rnorm(n_actors,10,2) + 2*x[first_appearance] + ui[first_appearance]
x2 <- rep(0,n)
for(i in 2:n){
if(i %in% first_appearance){next}
y[i] <- 4 + 2*x[i] + ui[i] + rho[events_act[i]]*y[max(which(events_act[1:(i - 1)] == events_act[i]))]
x2[i] <- y[max(which(events_act[1:(i - 1)] == events_act[i]))]
}
model <- lm(y ~ x)
summary(model)
lmtest::dwtest(model)
model$coefficients[1:2]
#can we kick it out through a fixed effect?
fixede <- as.factor(events_act)
model1 <- lm(y ~ x + fixede)
summary(model1)
lmtest::dwtest(model1)
lmtest::bgtest(model1)
model$coefficients[1:2]
model1$coefficients[1:2]
model2 <- lm(y ~ x + x2)
summary(model2)
lmtest::bgtest(model2)
lmtest::bgtest(model1)
lmtest::bgtest(model)
lmtest::dwtest(model1)
n <- 5000
n_actors <- 100
events_act <- sample(n_actors, n, T)
rho <- abs(rnorm(n_actors, 0, 0.33))
y <- rep(0, n)
x <- rnorm(n, 5, 10)
ui <- rnorm(n,0,1)
first_appearance <- match(1:n_actors, events_act)
y[first_appearance] <- 4 + rnorm(n_actors,10,2) + 2*x[first_appearance] + ui[first_appearance]
x2 <- rep(0,n)
for(i in 2:n){
if(i %in% first_appearance){next}
y[i] <- 4 + 2*x[i] + ui[i] + rho[events_act[i]]*y[max(which(events_act[1:(i - 1)] == events_act[i]))]
x2[i] <- y[max(which(events_act[1:(i - 1)] == events_act[i]))]
}
model <- lm(y ~ x)
summary(model)
lmtest::dwtest(model)
model$coefficients[1:2]
#can we kick it out through a fixed effect?
fixede <- as.factor(events_act)
model1 <- lm(y ~ x + fixede)
summary(model1)
lmtest::dwtest(model1)
lmtest::bgtest(model1)
model$coefficients[1:2]
model1$coefficients[1:2]
model2 <- lm(y ~ x + x2)
summary(model2)
lmtest::bgtest(model1)
lmtest::dwtest(model1)
+ rho
n <- 5000
n_actors <- 100
events_act <- sample(n_actors, n, T)
rho <- abs(rnorm(n_actors, 0, 0.33))
y <- rep(0, n)
x <- rnorm(n, 5, 10)
ui <- rnorm(n,0,1)
first_appearance <- match(1:n_actors, events_act)
y[first_appearance] <- 4 + rnorm(n_actors,10,2) + 2*x[first_appearance] + ui[first_appearance]
x2 <- rep(0,n)
for(i in 2:n){
if(i %in% first_appearance){next}
y[i] <- 4 + 2*x[i] + ui[i] + rho[events_act[i]]*y[max(which(events_act[1:(i - 1)] == events_act[i]))]
x2[i] <- y[max(which(events_act[1:(i - 1)] == events_act[i]))]
}
model <- lm(y ~ x)
summary(model)
lmtest::dwtest(model)
model$coefficients[1:2]
#can we kick it out through a fixed effect?
fixede <- as.factor(events_act)
model1 <- lm(y ~ x + fixede)
summary(model1)
lmtest::dwtest(model1)
lmtest::bgtest(model1)
model$coefficients[1:2]
model1$coefficients[1:2]
model2 <- lm(y ~ x + x2)
summary(model2)
summary(model)
lmtest::dwtest(model)
model$coefficients[1:2]
#can we kick it out through a fixed effect?
fixede <- as.factor(events_act)
model1 <- lm(y ~ x + fixede)
summary(model1)
model2 <- lm(y ~ x + x2)
summary(model2)
model$coefficients[1:2]
model1$coefficients[1:2]
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
summary(lm.D9)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(lm.D9, las = 1)      # Residuals, Fitted, ...
par(opar
---
title: "A Gentle Introduction to Social Network Analysis in R"
?evcent
?sna::evcent()
### Node (Centraility) Measures
##### Degree Centraility
##### Closeness Centraility
##### Betweeness Centraility
##### Eigenvector Centraility
#Generate some random graphs
dat<-rgraph(5,10)
library(sna)
#Generate some random graphs
dat<-rgraph(5,10)
#How centralized is the third one on indegree?
centralization(dat,g=3,degree,cmode="indegree")
#How about on total (Freeman) degree?
centralization(dat,g=3,degree)
# For this example, we generate a random one-mode graph with the sna package.
#if the package is not installed, do install.package("sna")
library(sna); library(redr)
#creating the random network with 10 actors
set.seed(9999)
rnet <- sna::rgraph(10, tprob = 0.20)
#counting the paths of length 2
npaths(rnet, k = 2)
#counting the paths of length 5
npaths(rnet, k = 5)
library(redr)
help(package = "redr")
EventSet <- twomodeRRS(
data = WikiEvent2018, # The Event Dataset
time = WikiEvent2018$time, # The Time Variable
eventID = WikiEvent2018$eventID, # The Event Sequence Variable
sender = WikiEvent2018$user, # The Sender Variable
receiver = WikiEvent2018$article, # The Receiver Variable
p_samplingobserved = 0.01, # The Probability of Selection
n_controls = 10, # The Number of Controls to Sample from the Full Risk Set
seed = 9999
) # The Seed for Replication
data("WikiEvent2018")
WikiEvent2018
EventSet <- twomodeRRS(
data = WikiEvent2018, # The Event Dataset
time = WikiEvent2018$time, # The Time Variable
eventID = WikiEvent2018$eventID, # The Event Sequence Variable
sender = WikiEvent2018$user, # The Sender Variable
receiver = WikiEvent2018$article, # The Receiver Variable
p_samplingobserved = 0.01, # The Probability of Selection
n_controls = 10, # The Number of Controls to Sample from the Full Risk Set
seed = 9999
) # The Seed for Replication
WikiEvent2018$eventID <- 1:nrow(WikiEvent2018) # creating an event sequence variable
WikiEvent2018$sender <- WikiEvent2018$user # renaming the sender variable to match the function output
WikiEvent2018$receiver <- WikiEvent2018$article # renaming the receiver variable to match the function output
weight <- function(current, past, halflife, dyadic_weight, Lerneretal_2013 = FALSE) {
if (Lerneretal_2013 == FALSE) { # If the user wants to use the lerner and lomi 2020 weight
#
#                           [ (-(t - t')) * (ln(2) / T1/2)        ]
#  w(u,a,t) = ∑allevents exp
#    where, t is the current event time, t' is the past event time, and T1/2 represents the given halflife
#    ln(2) is a constant in the calculation
w_uat1 <- exp((-(current - past) * log(2) / (halflife)))
w_uat1[  w_uat1 < dyadic_weight] <- 0 # if the value is less than the dyadic weight
# value becomes 0
}
if (Lerneretal_2013 == TRUE) { # If the user wants to use the lerner et. al 2013 weight
#
#                           [ (-(t - t')) * (ln(2) / T1/2)        ]
#  w(u,a,t) = ∑allevents exp                                        * (ln(2) / T1/2)
#    where, t is the current event time, t' is the past event time, and T1/2 represents the given halflife
#    ln(2) is a constant in the calculation
w_uat1 <- exp((-(current - past) * log(2) / (halflife)))  * log(2) / (halflife) # exponentiate the weight and multiply by (ln(2) / T1/2)
w_uat1[  w_uat1 < dyadic_weight] <- 0 # if the value is less than the dyadic weight
# value becomes 0
}
return(w_uat1) # return the calculated weight
}
WikiEvent2018$eventID <- 1:nrow(WikiEvent2018) # creating an event sequence variable
WikiEvent2018$sender <- WikiEvent2018$user # renaming the sender variable to match the function output
WikiEvent2018$receiver <- WikiEvent2018$article # renaming the receiver variable to match the function output
EventSet <- twomodeRRS(
data = WikiEvent2018, # The Event Dataset
time = WikiEvent2018$time, # The Time Variable
eventID = WikiEvent2018$eventID, # The Event Sequence Variable
sender = WikiEvent2018$user, # The Sender Variable
receiver = WikiEvent2018$article, # The Receiver Variable
p_samplingobserved = 0.01, # The Probability of Selection
n_controls = 10, # The Number of Controls to Sample from the Full Risk Set
seed = 9999
) # The Seed for Replication
EventSet
?redr::senderOutdegreeREM
EventSet
WikiEvent2018
test <- senderOutdegreeREM(events = WikiEvent2018,
eventSet = EventSet,
events_s = WikiEvent2018$sender,
eventSet_s = EventSet$sender,
halflife = 30000,
dyadic_weight = 0.02,
events_t = WikiEvent2018$time,
eventSet_t = EventSet$time,
events_id = WikiEvent2018$eventID,
eventSet_id = EventSet$EVENT
)
test <- senderOutdegreeREM(events = WikiEvent2018,
eventSet = EventSet,
events_s = WikiEvent2018$sender,
eventSet_s = EventSet$sender,
halflife = 30000,
dyadic_weight = 0.02,
events_t = WikiEvent2018$time,
eventSet_t = EventSet$time,
events_id = WikiEvent2018$eventID,
eventSet_id = EventSet$EVENT,
sliding_windows = FALSE)
test
test
tes
tse
tes
test
test$sender_outdegree
library(sna)
#Generate a moderately sparse Bernoulli graph
g<-rgraph(100,tp=1.5/99)
#Compute the structure statistics for g
ss<-structure.statistics(g)
plot(0:99,ss,xlab="Mean Coverage",ylab="Distance")
ss
?structure.statistics
devtools::load_all()
rm(list = ls())
library(redr)
?redr::senderIndegreeREM
events <- data.table::data.table(time = 1:18,
eventID = 1:18,
sender = c("A", "B", "C",
"A", "D", "E",
"F", "B", "A",
"F", "D", "B",
"G", "B", "D",
"H", "A", "D"),
target = c("B", "C", "D",
"E", "A", "F",
"D", "A", "C",
"G", "B", "C",
"H", "J", "A",
"F", "C", "B"))
eventSet <- onemodeRRS(data = events,
time = events$time,
eventID = events$eventID,
sender = events$sender,
receiver = events$target,
p_samplingobserved = 1.00,
n_controls = 1,
seed = 9999)
# Computing Sender Indegree Statistics without the sliding windows framework
eventSet$sender_indegree <- senderIndegreeREM(events = events,
eventSet = eventSet,
events_t = events$time,
events_s = events$sender,
events_r = events$target,
events_id = events$eventID,
eventSet_s = eventSet$sender,
eventSet_r = eventSet$receiver,
eventSet_t = eventSet$time,
eventSet_id = eventSet$EVENT,
halflife = 2,
dyadic_weight = 0,
sliding_windows = FALSE,
returnOnlyValues = TRUE)
# Computing Sender Indegree Statistics with the sliding windows framework
eventSet$sender_indegreeSW <- senderIndegreeREM(events = events,
eventSet = eventSet,
events_t = events$time,
events_s = events$sender,
events_r = events$target,
events_id = events$eventID,
eventSet_s = eventSet$sender,
eventSet_r = eventSet$receiver,
eventSet_t = eventSet$time,
eventSet_id = eventSet$EVENT,
halflife = 2,
dyadic_weight = 0,
sliding_windows = TRUE,
window_size = 9,
returnOnlyValues = TRUE)
events
eventSet
?rem::createRemDataset()
library(redr)
2577 - 1324
data <- data.frame(
x1 = rnorm(100),
x2 = sample(0:1, 100, T),
x3 = rnorm(100, 10, 5),
x4= rexp(100)
)
data
summary(data)
data$x4[1:5] <- NA
data
summary(data)
mean(data$x4, na.rm =  T)
?summary
j <-summary(data)
j
dplyr::summarise_all(data)
?dplyr::summarise_all()
dplyr::summarise_all(data, list(mean, min, max))
dplyr::summarise_all(data, .funs = (mean, min, max))
dplyr::summarise_all(data, .funs = mean, min, max)
dplyr::summarise_all(data, .funs = mean)
dplyr::summarise_all(data, .funs = mean, na.rm = T)
setwd("/Users/kevincarson/Dropbox/GitHub_Webpage/github.io")
library(rmarkdown)
setwd("~/Dropbox/GitHub_Webpage/github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/Dropbox/GitHub_Webpage/github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd("~/Dropbox/GitHub_Webpage/github.io")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
